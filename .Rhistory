exit
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
View(iris)
virginica <- subset(iris, Species == "virginica")
virginica
summary(virginica)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
library(datasets)
data(iris)
?iris
View(iris)
virginica <- subset(iris, Species == "virginica")
virginica
summary(virginica)
summary(sl)
library(datasets)
data(iris)
# A description of the dataset can be found by running
?iris
str(iris)
head(iris)
virginica<-subset(iris,Species == 'virginica')
sl<-data.frame(virginica$Sepal.Length)
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
sl
summary(sl)
str(iris)
head(iris)
virginica<-subset(iris,Species == 'virginica')
sl<-data.frame(virginica$Sepal.Length)
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
sl
summary(sl)
library(datasets)
data(mtcars)
# object names 'mtcars' in your workspace
# information about the dataset by running
?mtcars
str(mtcars)
head(mtcars)
# calculate the average miles per gallon (mpg)
# by number of cylinders in the car (cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
# Apply a function to each cell of a ragged array,
# that is to each (non-empty) group of values
# given by a unique combination of the levels of certain factors.
apply(mtcars, 2, mean)# mean for every column
sapply(split(mtcars$mpg, mtcars$cyl), mean)
# 4        6        8
# 26.66364 19.74286 15.10000
# sapply is a user-firendly version of lapply
# by default returning a vector or matrix if appropriate
# description of lapply:
# lapply returns a list of the same length as X,
# each element of which is the result of applying FUN
# to the corresponding element of X
# create a list with 2 elements
l <- list(a = 1:10, b = 11:20)
# the mean of the values in each element
lapply(l, mean)
# $a
# [1] 5.5
#
# $b
# [1] 15.5
# the sum of the values in each element
lapply(l, sum)
# $a
# [1] 55
#
# $b
# [1] 155
abs(mean(split(mtcars, mtcars$cyl)$'4'$hp) - mean(split(mtcars, mtcars$cyl)$'8'$hp))
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
rawDat <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
## Filter the dataset by date
hpcDat <- rawDat[rawDat[, "Date"] %in% c("1/2/2007","2/2/2007") ,]
## Convert columns into their proper types
hpcDat[,"Date"] <- as.Date(hpcDat[, "Date"], "%d/%m/%Y")
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
clear
clean
cls
clearPushBack()
getwd()
setwd('/Users/subashshrestha/Coursera_git/Shiny_app_and_Reproducible_Pitch/')
install install.packages('slidify')
install.packages('slidify')
# Chunk 1
summary(cars)
# Chunk 1
indiatourism <- read.csv('indiatourism.csv', stringsAsFactors = FALSE)
indiatourism$NoOfVisitors <- as.numeric(indiatourism$NoOfVisitors)
indiatourism$Region <- as.factor(indiatourism$Region)
indiatourism$IncomeGroup <- factor(indiatourism$IncomeGroup
, levels = c("High income","Low income","Upper middle income","Others","Lower middle income")
, labels = c("High income","Low income","Upper middle income","Others","Lower middle income"))
names(indiatourism)
summary(cars)
